#include<iostream>

template <typename T>
struct Node {
    T data;
    Node *left;
    Node *right;
};


template <typename T>
Node<T> * newNode( T data )
{
    Node<T> * temp = new Node<T>;
    temp->data = data;
    temp->left = temp->right = nullptr;
    return temp;
}

template <typename T>
void insert( Node<T>* & node, T data)
{
    if ( node == nullptr )
    {
        node = newNode( data );        
    }
    else
    {
        if ( data < node->data )
        {
            insert( node->left, data );
        }
        else
        {
            insert( node->right, data);
        }
    }
}

template <typename T>
void inorder( Node<T> * node )
{
    if ( node != nullptr )
    {
        inorder( node->left );
        std::cout << node->data << " " ; 
        inorder( node->right );
    }
}

int main()
{
    Node<int> *root;
    insert( root, 11 );
    insert( root, 9 );
    insert( root, 20 );
    insert( root, 15 );
    insert( root, 25 );
    std::cout << "Inorder:";
    inorder(root);
    std::cout << std::endl;
    return 0;
}



